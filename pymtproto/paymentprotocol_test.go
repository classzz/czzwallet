package pymtproto

import (
	"bytes"
	"encoding/base64"
	"encoding/hex"
	"github.com/classzz/classzz/chaincfg"
	"github.com/classzz/classzz/wire"
	"github.com/classzz/czzutil"
	"gopkg.in/jarcoal/httpmock.v1"
	"net/http"
	"testing"
)

var (
	testPaymentRequest = "0801120b783530392b7368613235361a9f160ac50c3082064130820529a003020102020900e1222c5cacc7e4c2300d06092a864886f70d01010b05003081b4310b30090603550406130255533110300e060355040813074172697a6f6e61311330110603550407130a53636f74747364616c65311a3018060355040a1311476f44616464792e636f6d2c20496e632e312d302b060355040b1324687474703a2f2f63657274732e676f64616464792e636f6d2f7265706f7369746f72792f313330310603550403132a476f2044616464792053656375726520436572746966696361746520417574686f72697479202d204732301e170d3138303830323138343432305a170d3139313030313231313333385a303d3121301f060355040b1318446f6d61696e20436f6e74726f6c2056616c696461746564311830160603550403130f746573742e6269747061792e636f6d30820122300d06092a864886f70d01010105000382010f003082010a0282010100d14377b6f2b50aa73427c248915563d2c8804dd824b1d8f015dd1ae2a390c8022fd963355849b217309208c3450a016ff4001ee336a3189edadce12bc41e4999e45f6fcf0b00daa7e9a4b12e72dce19c51ae8e55b8bfec02b80a58ccb2c1b3e5bde81f679b9993bf52c871a1fadef6bb5f7d8d9208889400ba2be1d2baf82ec303470852570c3bbb6b89334d8974e61b8867bf299fb802c57e9b00d9b9f70572ac6d81fecd304c83aaf21f4f3b529e9898ea9b868f8f07b4189668e71854ae776bacd0d9706a8be03f528c68ad023e3b45bfa55e9b42e535aafc7eb8672645dcdeaf7204a468d2b84f27ed12072a411627647108e421abe7308e3bac305896f10203010001a38202ca308202c6300c0603551d130101ff04023000301d0603551d250416301406082b0601050507030106082b06010505070302300e0603551d0f0101ff0404030205a030370603551d1f0430302e302ca02aa0288626687474703a2f2f63726c2e676f64616464792e636f6d2f676469673273312d3835342e63726c305d0603551d20045630543048060b6086480186fd6d010717013039303706082b06010505070201162b687474703a2f2f6365727469666963617465732e676f64616464792e636f6d2f7265706f7369746f72792f3008060667810c010201307606082b06010505070101046a3068302406082b060105050730018618687474703a2f2f6f6373702e676f64616464792e636f6d2f304006082b060105050730028634687474703a2f2f6365727469666963617465732e676f64616464792e636f6d2f7265706f7369746f72792f67646967322e637274301f0603551d2304183016801440c2bd278ecc348330a233d7fb6cb3f0b42c80ce302f0603551d1104283026820f746573742e6269747061792e636f6d82137777772e746573742e6269747061792e636f6d301d0603551d0e041604142cd8def7d64c620cce78bdec365fd961cfd035e130820104060a2b06010401d6790204020481f50481f200f0007700a4b90990b418581487bb13a2cc67700a3c359804f91bdfb8e377cd0ec80ddc1000000164fbf55c500000040300483046022100d6a82312b4a16c7ed7911a2e559168ea77d01e3dcf9cfe63a6662e2661546405022100a43fe7cbe2fd9ae72a349ba1b19de71e7804cae2c3755774c4b8de4d432cbcd5007500747eda8331ad331091219cce254f4270c2bffd5e422008c6373579e6107bcc5600000164fbf55ed7000004030046304402201727366c115d0fb8f940cce989730727cc59d15c94120146f1c239989deeecaa0220602b946de08661ed7ff3ed64988a3d872151c89f20a9c0dbbc6edcc04870380a300d06092a864886f70d01010b05000382010100060cf534f7adea711fabcd9338fa89f4bc244da0a6af232f7d337f2d8ea79394343b5f5dfb07c3f2e71195755e0a8f3f51b0444e7e17b4b926cb0f9dc49253dc66f1ed8fd52297be8b515a4240ac59fc3f7f1fa810ab24b196c4ae57827abf25e76838edc0a86bfdd0c386f9c4b6a7fa94672b79177646323875cfff2da42106be46ff0e1b41e3b5706f1be19b582005fbedacf88d69370a2ccda66bffe6e7ef5f33a408707ebd3ddc20b1ff24d6bd94cc6db5e069277d78d56218cfddbfcd83f2be5e477734f548a6da0ae58bed212bf817914f3fe6f9afa4ad59fe5d97b0514e277dc6ba48672e074b23fe89a5f72c58ec139b3f1c09d557b6e7d2df5f52880ad409308204d0308203b8a003020102020107300d06092a864886f70d01010b0500308183310b30090603550406130255533110300e060355040813074172697a6f6e61311330110603550407130a53636f74747364616c65311a3018060355040a1311476f44616464792e636f6d2c20496e632e3131302f06035504031328476f20446164647920526f6f7420436572746966696361746520417574686f72697479202d204732301e170d3131303530333037303030305a170d3331303530333037303030305a3081b4310b30090603550406130255533110300e060355040813074172697a6f6e61311330110603550407130a53636f74747364616c65311a3018060355040a1311476f44616464792e636f6d2c20496e632e312d302b060355040b1324687474703a2f2f63657274732e676f64616464792e636f6d2f7265706f7369746f72792f313330310603550403132a476f2044616464792053656375726520436572746966696361746520417574686f72697479202d20473230820122300d06092a864886f70d01010105000382010f003082010a0282010100b9e0cb10d4af76bdd49362eb3064b881086cc304d962178e2fff3e65cf8fce62e63c521cda16454b55ab786b63836290ce0f696c99c81a148b4ccc4533ea88dc9ea3af2bfe80619d7957c4cf2ef43f303c5d47fc9a16bcc3379641518e114b54f828bed08cbef030381ef3b026f86647636dde7126478f384753d1461db4e3dc00ea45acbdbc71d9aa6f00dbdbcd303a794f5f4c47f81def5bc2c49d603bb1b24391d8a4334eeab3d6274fad258aa5c6f4d5d0a6ae7405645788b54455d42d2a3a3ef8b8bde9320a029464c4163a50f14aaee77933af0c20077fe8df0439c269026c6352fa77c11bc87487c8b993185054354b694ebc3bd3492e1fdcc1d252fb0203010001a382011a30820116300f0603551d130101ff040530030101ff300e0603551d0f0101ff040403020106301d0603551d0e0416041440c2bd278ecc348330a233d7fb6cb3f0b42c80ce301f0603551d230418301680143a9a8507106728b6eff6bd05416e20c194da0fde303406082b0601050507010104283026302406082b060105050730018618687474703a2f2f6f6373702e676f64616464792e636f6d2f30350603551d1f042e302c302aa028a0268624687474703a2f2f63726c2e676f64616464792e636f6d2f6764726f6f742d67322e63726c30460603551d20043f303d303b0604551d20003033303106082b06010505070201162568747470733a2f2f63657274732e676f64616464792e636f6d2f7265706f7369746f72792f300d06092a864886f70d01010b05000382010100087e6c9310c838b896a9904bffa15f4f04ef6c3e9c8806c9508fa673f757311bbebce42fdbf8bad35be0b4e7e679620e0ca2d76a637331b5f5a848a43b082da25d90d7b47c254f115630c4b6449d7b2c9de55ee6ef0c61aabfe42a1bee849eb8837dc143ce44a713700d911ff4c813ad8360d9d872a873241eb5ac220eca17896258441bab892501000fcdc41b62db51b4d30f512a9bf4bc73fc76ce36a4cdd9d82ceaae9bf52ab290d14d75188a3f8a4190237d5b4bfea403589b46b2c3606083f87d5041cec2a190c3bbef022fd21554ee4415d90aaea78a33edb12d763626dc04eb9ff7611f15dc876fee469628ada1267d0a09a72e04a38dbcf8bc0430012286020a04746573741220089099ea0f121976a914646947df2edc4449b6a25eefac82adc47543b14e88ac18afff96e40520b38697e4052a4b5061796d656e74207265717565737420666f722042697450617920696e766f696365204454726439584b795568364c6562504a466f4561544120666f72206d65726368616e742062636864323068747470733a2f2f746573742e6269747061792e636f6d2f692f4454726439584b795568364c6562504a466f456154413a4c7b22696e766f6963654964223a224454726439584b795568364c6562504a466f45615441222c226d65726368616e744964223a22514871385734584d44386a765a45597a737935766931227d450e2db23f2a8002a5ab560ebf001ea80f46e46c1c8f5eec66f34ebfb1b33e658aa6a95bf9cb328cc7514be2b131d47a271b9e73b8e454ef9642838522e725b53fef12df54bcfceb5dff13c68b824610de0bfc28267b3c4b4c1138b50903e96764ab4777ba0735d7821f82dc4a7cec46d4d3bee459cf6418ce3865c08725170426dddc69c09290e1ae4384692c9753ddff79a84a38970c7df2767883135d960dd7791b0b308d959f8574e571f2c8cc2fae666457ab4573ed622ecd7c5b8bdd7e90e3150946bfc2eff66f14d74ef8ccf7fc587bee9b6c008136ad96f2f122458e59e5634e56858312520fe791befd10934973c1ae8660b708fc383017ef02fe4a046cdc12fd76aef5"
	testPaymentAck     = "0ad6020a4c7b22696e766f6963654964223a224d46756e5261665755656d4b4d6f6a42626e54333352222c226d65726368616e744964223a22514871385734584d44386a765a45597a737935766931227d12e1010100000001e19aafde7cd10dbdcfdc3f7ebbcabbbcddc50422c98dbe20e8139009b22fa3e2010000006a4730440220763c2bde7707a28e7677517f1d128081018c9e0618b0600c2c0c37b2794629f602206995f7db1fcf3ee6802f87a1e62bd7509f4252fbef62e09170eeb2d124f58648412102af5d7bd2522968296b3704c09ba031d0b98b674dac5f67581fbe3c92370bf37affffffff02300b3300000000001976a9147a62aef5cdf4ac00f6cc2f0876c5c42fd2205d7588ac3c283200000000001976a914dcc17bdff94e5140e8d684e5a3142526f5d9128288ac000000001a2008b096cc01121976a9142054e43b0defc8f295e03d443e5d9b6c0b4be72e88ac2200125f5472616e73616374696f6e207265636569766564206279204269745061792e20496e766f6963652077696c6c206265206d61726b6564206173207061696420696620746865207472616e73616374696f6e20697320636f6e6669726d65642e"
)

func TestPaymentProtocolClient_TestDownloadBip0070PaymentRequest(t *testing.T) {
	uri := "bitcoincash:?r=https://test.bitpay.com/i/KqSWvRBKC58CgdpfsttzBC"

	client := &http.Client{}

	httpmock.ActivateNonDefault(client)
	defer httpmock.DeactivateAndReset()

	prClient := NewPaymentProtocolClient(&chaincfg.TestNet3Params, nil)
	prClient.httpClient = client
	prClient.skipExpirationChecks = true

	serializedResponse, err := hex.DecodeString(testPaymentRequest)
	if err != nil {
		t.Fatal(err)
	}

	response := httpmock.NewBytesResponse(http.StatusOK, serializedResponse)

	httpmock.RegisterResponder(http.MethodGet, "https://test.bitpay.com/i/KqSWvRBKC58CgdpfsttzBC",
		func(req *http.Request) (*http.Response, error) {
			return response, nil
		},
	)

	pr, err := prClient.DownloadBip0070PaymentRequest(uri)
	if err != nil {
		t.Fatal(err)
	}

	if pr.PayToName != "test.bitpay.com" {
		t.Error("Returned incorrect name")
	}
	if len(pr.Outputs) != 1 {
		t.Error("Returned incorrect number of outputs")
	}
	if pr.Outputs[0].Address.String() != "qpjxj37l9mwygjdk5f0wltyz4hz82sa3fc9pprkvss" {
		t.Error("Returned incorrect output address")
	}
	if pr.Outputs[0].Amount.ToUnit(czzutil.AmountSatoshi) != 33197200 {
		t.Error("Returned incorrect amount")
	}
	if pr.Expires.Unix() != 1552270131 {
		t.Error("Returned incorrect expiration time")
	}
	if pr.Memo != "Payment request for BitPay invoice DTrd9XKyUh6LebPJFoEaTA for merchant bchd" {
		t.Error("Returned incorrect memo")
	}
	if pr.PaymentURL != "https://test.bitpay.com/i/DTrd9XKyUh6LebPJFoEaTA" {
		t.Error("Returned incorrect payment URL")
	}
	if base64.RawStdEncoding.EncodeToString(pr.MerchantData) != "eyJpbnZvaWNlSWQiOiJEVHJkOVhLeVVoNkxlYlBKRm9FYVRBIiwibWVyY2hhbnRJZCI6IlFIcThXNFhNRDhqdlpFWXpzeTV2aTEifQ" {
		t.Error("Returned incorrect merchant data")
	}
}

func TestPaymentProtocolClient_PostPayment(t *testing.T) {
	client := &http.Client{}

	httpmock.ActivateNonDefault(client)
	defer httpmock.DeactivateAndReset()

	prClient := NewPaymentProtocolClient(&chaincfg.TestNet3Params, nil)
	prClient.httpClient = client
	prClient.skipExpirationChecks = true

	serializedResponse, err := hex.DecodeString(testPaymentAck)
	if err != nil {
		t.Fatal(err)
	}

	response := httpmock.NewBytesResponse(http.StatusOK, serializedResponse)

	httpmock.RegisterResponder(http.MethodPost, "https://test.bitpay.com/i/DTrd9XKyUh6LebPJFoEaTA",
		func(req *http.Request) (*http.Response, error) {
			return response, nil
		},
	)

	refundAddr, err := czzutil.DecodeAddress("bchtest:qzq68p9v5876xrvkq8v38cww8796rdrpxstc4ak47x", &chaincfg.TestNet3Params)
	if err != nil {
		t.Fatal(err)
	}

	tx := wire.NewMsgTx(1)
	txBytes := []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	err = tx.BchDecode(bytes.NewReader(txBytes), wire.ProtocolVersion, wire.BaseEncoding)
	if err != nil {
		t.Fatal(err)
	}
	memo, err := prClient.PostPayment(&Payment{
		PaymentURL:   "https://test.bitpay.com/i/DTrd9XKyUh6LebPJFoEaTA",
		MerchantData: []byte{},
		RefundOutput: Output{
			Amount:  czzutil.Amount(1),
			Address: refundAddr,
		},
		Transactions: []*wire.MsgTx{tx},
	})
	if err != nil {
		t.Fatal(err)
	}
	if memo != "Transaction received by BitPay. Invoice will be marked as paid if the transaction is confirmed." {
		t.Error("Returned incorrect memo")
	}
}
